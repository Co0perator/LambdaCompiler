This text document contains the official standards for the LambdaLang programming language.
Copyright 2020 Miles Potter

Section 1: Language Rules

1. Every function and variable of any kind shall be reffered to as a Box.
2. Boxes will contain a pointer to whatever data or function they represent
3. The file extension of LambdaLang source code files will be .lambda and header files, referred to in LambdaLang vocabulary as "definition files" will have the have the file extension of .ldef
. unchanging variables and functions, known as "constants" shall be made using the DEFINE token

Section 2: Language Tokens
	this section gives all LambdaLang tokens and how they will be written inside of a LambdaLang source code file.
	More information on these tokens can be found in Section 1: Language Rules
	The format of this section is: [token] "[how it is written]" ([notes])

NAME "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_" (the how it is written section of this token simply contains the characters that may be used inside of this token)

PARAM "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_" (the how it is written section of this token simply contains the characters that may be used inside of this token)

LAMBDA "^" (this token is used to denote a parameter, and the use of one immediatley after an instance of the DEFINE or ASSIGN tokens denotes the beginning of a function)

DEFINE ":=" (this denotes the making of an unchanging function or variable)

ASSIGN "=" (this denotes either the making or the changing of an already made function or variable)

REFERENCE "&" (this acts similarly to a function returning a pointer to the function or variable given by a NAME token immediatley following this token)

DEREFERENCE "*" (this acts similarly to a function returning the value pointed to by the pointer passed into it by the NAME token immediatley following it, and it can be used to call functions given a pointer to them)

SEPARATOR "." (this token separates parameters from each other and the body of a function)

APPLICATOR " " (this token is used to call functions and pass in arguments to them)
